#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef NGP_SWIFT_H
#define NGP_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <NGP/NGP.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NGP",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_PROTOCOL_NAMED("AccessEvent")
@protocol NGPAccessEvent
@end

@class NSString;
@class NGPEventEmitterProvider;
@class NGPLoggerProvider;

/// The AccessState manager is the global source of truth for which <code>NGPAccessState</code> the app is currently in.
/// This manager uses a Redux like pattern of using  events (<code>AccessEvent</code>) to advance the state.
/// To change the <code>AccessStateManager/currentState</code>, call the <code>AccessStateManager/handleAccessEvent(accessEvent:)</code> method with the appropriate access event.
/// When the <code>AccessStateManager/currentState</code> changes, this manager automatically does a few important things:
/// <ul>
///   <li>
///     It potentially emits an <code>onUserStateChanged</code> event if appropriate
///   </li>
///   <li>
///     It automatically renders the profile gate / login / signup flows by letting its <code>ViewTransitionDelegate</code> know about the state change
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("AccessStateManager")
@interface NGPAccessStateManager : NSObject
@property (nonatomic, readonly) NSInteger currentAccessStateRawValue;
@property (nonatomic, readonly) BOOL isFirstCheckAccess;
@property (nonatomic, readonly) BOOL isShowingProfileGate;
/// The last change in access state
@property (nonatomic, readonly, copy) NSString * _Nonnull lastTransition;
- (void)_setViewTransitionDelegate:(id _Nullable)delegate;
- (nonnull instancetype)initWithEventEmitterProvider:(NGPEventEmitterProvider * _Nonnull)eventEmitterProvider loggerProvider:(NGPLoggerProvider * _Nonnull)loggerProvider OBJC_DESIGNATED_INITIALIZER;
/// Advance the AccessStateManager to a new SDK state by letting it know some “authy” event has happened.
- (void)handleAccessEvent:(id <NGPAccessEvent> _Nonnull)accessEvent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("AccessStateManagerObjCProtocol")
@protocol NGPAccessStateManagerObjCProtocol
@property (nonatomic, readonly) NSInteger currentAccessStateRawValue;
- (void)handleAccessEvent:(id <NGPAccessEvent> _Nonnull)accessEvent;
@property (nonatomic, readonly) BOOL isShowingProfileGate;
@end


SWIFT_PROTOCOL_NAMED("Player")
@protocol NetflixPlayer
@property (nonatomic, readonly, copy) NSString * _Nonnull ID;
@property (nonatomic, readonly, copy) NSString * _Nullable handle;
@end


SWIFT_PROTOCOL_NAMED("AccountPlayer")
@protocol NetflixAccountPlayer <NetflixPlayer>
@property (nonatomic, readonly, copy) NSString * _Nonnull gamerProfileID;
@end


/// The data model used to represent an achievement.  This includes both achievement configuration, as well as the state of the achievement for the current player
SWIFT_CLASS_NAMED("Achievement")
@interface NetflixAchievement : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) BOOL isLocked;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A status enum used in all achievement operations
typedef SWIFT_ENUM_NAMED(NSInteger, NetflixAchievementStatus, "AchievementStatus", open) {
  NetflixAchievementStatusOk = 0,
  NetflixAchievementStatusErrorUnknown = 1000,
  NetflixAchievementStatusErrorNetwork = 1003,
  NetflixAchievementStatusErrorPlatformNotInitialized = 1004,
  NetflixAchievementStatusErrorUserProfileNotSelected = 1005,
  NetflixAchievementStatusErrorInterruptedByProfileSwitch = 1006,
  NetflixAchievementStatusErrorInternal = 1009,
  NetflixAchievementStatusErrorTimedOut = 1011,
  NetflixAchievementStatusErrorUnavailable = 1012,
  NetflixAchievementStatusErrorUnknownAchievement = 2000,
  NetflixAchievementStatusErrorArchivedAchievement = 2001,
};

@class NetflixUnlockAchievementResult;
@class NetflixAchievementsResult;

/// The public NetflixAchievements class which is exposed to game developers
SWIFT_CLASS_NAMED("Achievements")
@interface NetflixAchievements : NSObject
/// Unlock an achievement.  This method is “best effort” and “fire and forget”
/// In case of offline scenarios, unlocks are cached to an on-disk store and sent to the server when connectivity resumes
+ (void)unlockAchievementWithAchievementName:(NSString * _Nonnull)achievementName completionHandler:(void (^ _Nonnull)(NetflixUnlockAchievementResult * _Nonnull))completionHandler;
/// Get the user’s current achievements.
+ (void)achievementsWithCompletionHandler:(void (^ _Nonnull)(NetflixAchievementsResult * _Nonnull))completionHandler;
/// Show the achievements panel
+ (void)showAchievementsPanel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("AchievementsBridgeFormatter")
@interface NGPAchievementsBridgeFormatter : NSObject
- (NSString * _Nonnull)bridgeRepresentationWithAchievementResult:(NetflixUnlockAchievementResult * _Nonnull)achievementResult SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)bridgeRepresentationWithAchievementsResult:(NetflixAchievementsResult * _Nonnull)achievementsResult SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A top level object representing the result of an operation involving multiple achievements
SWIFT_CLASS_NAMED("AchievementsResult")
@interface NetflixAchievementsResult : NSObject
@property (nonatomic, readonly) enum NetflixAchievementStatus status;
@property (nonatomic, readonly, copy) NSArray<NetflixAchievement *> * _Nonnull achievements;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A protocol defining data needed to represent the input and output data that represents various screens in the sign up flow
SWIFT_PROTOCOL_NAMED("AuthenticationData")
@protocol NGPAuthenticationData
@end


SWIFT_CLASS_NAMED("ActiveMembershipAuthenticationData")
@interface NGPActiveMembershipAuthenticationData : NSObject <NGPAuthenticationData>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NetflixStatItem;
@class SubmitStatResult;

SWIFT_CLASS_NAMED("AggregatedStatResult")
@interface NetflixAggregatedStatResult : NSObject
@property (nonatomic, readonly) NetflixStatsStatus status;
@property (nonatomic, readonly, strong) NetflixStatItem * _Nullable aggregatedStat;
@property (nonatomic, readonly, strong) SubmitStatResult * _Nonnull result;
- (nonnull instancetype)initWithResult:(SubmitStatResult * _Nonnull)result aggregatedStat:(NetflixStatItem * _Nullable)aggregatedStat OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)bridgeRepresentation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("AlertErrorButton")
@interface NGPAlertErrorButton : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Makes all API requests necessary for account functions.  This includes:
/// <ul>
///   <li>
///     login / logout
///   </li>
///   <li>
///     signup
///   </li>
///   <li>
///     notifications
///   </li>
///   <li>
///     public identity setting
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP3NGP15ServiceProtocol_")
@protocol ServiceProtocol
@end

@class NGPLoginAuthenticationData;
@class NGPCreateAccountAuthenticationData;
@class NGPOrderConfirmAuthenticationData;
@class NSData;

SWIFT_CLASS_NAMED("ApolloAccountService")
@interface NGPApolloAccountService : NSObject <ServiceProtocol>
@property (nonatomic, readonly, strong) NGPApolloAccountService * _Nonnull accountService;
- (nonnull instancetype)initWithLoggerProvider:(NGPLoggerProvider * _Nonnull)loggerProvider OBJC_DESIGNATED_INITIALIZER;
- (void)fetchSDKConfigAndLoginConfig:(NSString * _Nonnull)itunesIdentifier preferredLanguageCode:(NSString * _Nonnull)preferredLanguageCode withCallback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)fetchSDKConfigWithCallback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)loginWithAuthData:(NGPLoginAuthenticationData * _Nonnull)authData loginFlowKey:(NSString * _Nonnull)loginFlowKey userIdForLogin:(NSString * _Nonnull)userIdForLogin preferredLanguageCode:(NSString * _Nonnull)preferredLanguageCode usingCallback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)loginWithSsoToken:(NSString * _Nonnull)ssoToken userIdForLogin:(NSString * _Nonnull)userIdForLogin preferredLanguageCode:(NSString * _Nonnull)preferredLanguageCode withCallback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)logoutJustThisAppWithDeviceToken:(NSString * _Nonnull)deviceToken currentProfileGUID:(NSString * _Nonnull)currentProfileGUID callback:(void (^ _Nonnull)(NSDictionary * _Nullable, NSError * _Nullable))callback;
- (void)checkAccessWithOfflineToken:(NSString * _Nonnull)offlineToken gamerAccessToken:(NSString * _Nonnull)gamerAccessToken preferredLanguageCode:(NSString * _Nonnull)preferredLanguageCode currentProfileGUID:(NSString * _Nonnull)currentProfileGUID withCallback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)switchProfilesWithTarget:(NSString * _Nonnull)target pin:(NSString * _Nonnull)pin preferredLanguageCode:(NSString * _Nonnull)preferredLanguageCode callback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)refreshAccount:(NSString * _Nonnull)accountOwnerGUID callback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)refreshSSOToken:(NSString * _Nullable)ssoToken accountOwnerGUID:(NSString * _Nonnull)accountOwnerGUID callback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)updateWebUrls:(NSString * _Nonnull)currentProfileGUID preferredLanguageCode:(NSString * _Nonnull)preferredLanguageCode callback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)_updateNotificationSettingsWithRequests:(NSArray<NSObject *> * _Nonnull)requests currentProfileGUID:(NSString * _Nonnull)currentProfileGUID;
- (void)syntheticAllocateWithCallback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)requestCreateAccountWithItunesIdentifier:(NSString * _Nonnull)itunesIdentifier preferredLanguageCode:(NSString * _Nonnull)preferredLanguageCode accountOwnerGUID:(NSString * _Nullable)accountOwnerGUID callback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)createAccountWithFlowKey:(NSString * _Nonnull)flowKey data:(NGPCreateAccountAuthenticationData * _Nonnull)data preferredLanguageCode:(NSString * _Nonnull)preferredLanguageCode signupOwnerGuid:(NSString * _Nonnull)signupOwnerGuid callback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)continueFromReturningAccountWithFlowKey:(NSString * _Nonnull)flowKey preferredLanguageCode:(NSString * _Nonnull)preferredLanguageCode signupOwnerGuid:(NSString * _Nonnull)signupOwnerGuid callback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)requestPreviousAuthenticationWithFlowKey:(NSString * _Nonnull)flowKey preferredLanguageCode:(NSString * _Nonnull)preferredLanguageCode signupOwnerGuid:(NSString * _Nonnull)signupOwnerGuid callback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)startMembership:(NGPOrderConfirmAuthenticationData * _Nonnull)data purchaseDetails:(NSDictionary * _Nonnull)result receipt:(NSData * _Nonnull)receipt fowKey:(NSString * _Nonnull)flowKey preferredLanguageCode:(NSString * _Nonnull)preferredLanguageCode signupOwnerGuid:(NSString * _Nonnull)signupOwnerGuid callback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)signupCurrentStateWithFlowKey:(NSString * _Nonnull)flowKey preferredLanguageCode:(NSString * _Nonnull)preferredLanguageCode callback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)claimPublicIdentityWithHandle:(NSString * _Nonnull)handle currentProfileGUID:(NSString * _Nonnull)currentProfileGUID callback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)checkHandleAvailability:(NSString * _Nonnull)handle currentProfileGUID:(NSString * _Nonnull)currentProfileGUID callback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ApolloClientProvider")
@interface NGPApolloClientProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NGPApolloClientProvider * _Nonnull shared;)
+ (NGPApolloClientProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)reset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The data for a consent field that should be offered to a user
SWIFT_CLASS_NAMED("AuthenticationConsent")
@interface NGPAuthenticationConsent : NSObject
/// The key used to identify this consent
@property (nonatomic, readonly, copy) NSString * _Nonnull consentKey;
/// Whether or not the consent has been accepted by the user
@property (nonatomic) BOOL isChecked;
/// Initialize a consent
/// \param consentKey The key used to identify this consent
///
/// \param isRequired Whether or not this consent is required to be checked for the user to proceed
///
/// \param label The label shown to the user for this consent
///
/// \param isChecked Whether or not the consent has been accepted by the user
///
- (nonnull instancetype)initWithConsentKey:(NSString * _Nonnull)consentKey isRequired:(BOOL)isRequired label:(NSString * _Nonnull)label isChecked:(BOOL)isChecked OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class NSError;

SWIFT_CLASS_NAMED("CheckAuthAccessEvent")
@interface NGPCheckAuthAccessEvent : NSObject <NGPAccessEvent>
- (nonnull instancetype)initWithCurrentProfileObject:(NSObject * _Nullable)currentProfileObject previousProfileObject:(NSObject * _Nullable)previousProfileObject accessState:(NSInteger)accessState error:(NSError * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("CloudSaveService")
@interface NGPCloudSaveService : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NGPCloudSaveService * _Nonnull shared;)
+ (NGPCloudSaveService * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)progressSlotWithSlotId:(NSString * _Nonnull)slotId callback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)saveSlotWithSlotId:(NSString * _Nonnull)slotId snapshotId:(NSString * _Nullable)snapshotId data:(NSData * _Nonnull)data callback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)deleteSlotWithSlotId:(NSString * _Nonnull)slotId snapshotId:(NSString * _Nullable)snapshotId callback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (void)progressSlotsWithCallback:(void (^ _Nonnull)(NSDictionary * _Nonnull, NSError * _Nullable))callback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NGPCorporateInfoLink;

SWIFT_CLASS_NAMED("CorporateInfo")
@interface NGPCorporateInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull ctaButton;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull content;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull footer;
@property (nonatomic, readonly, copy) NSArray<NGPCorporateInfoLink *> * _Nonnull links;
- (nonnull instancetype)initWithCtaButton:(NSString * _Nonnull)ctaButton title:(NSString * _Nonnull)title content:(NSArray<NSString *> * _Nonnull)content footer:(NSArray<NSString *> * _Nonnull)footer links:(NSArray<NGPCorporateInfoLink *> * _Nonnull)links OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Link")
@interface NGPCorporateInfoLink : NSObject
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title url:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSException;

SWIFT_CLASS_NAMED("CrashReporter")
@interface NGPCrashReporter : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NGPCrashReporter * _Nonnull shared;)
+ (NGPCrashReporter * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)start;
- (void)startInUnity:(BOOL)inUnity;
- (void)reset;
- (void)updateProfile;
- (void)logHandledException:(NSException * _Nonnull)exception;
- (void)logHandledWithError:(NSError * _Nonnull)error;
- (void)leaveBreadcrumb:(NSString * _Nonnull)message;
@end

@class NGPValidationData;

/// The data representing the Create Account screen
SWIFT_CLASS_NAMED("CreateAccountAuthenticationData")
@interface NGPCreateAccountAuthenticationData : NSObject <NGPAuthenticationData>
/// The email address to create an account for
@property (nonatomic, copy) NSString * _Nullable email;
/// The password to create an account with
@property (nonatomic, copy) NSString * _Nullable password;
/// The consents that the user has checked off to create an account
@property (nonatomic, readonly, copy) NSArray<NGPAuthenticationConsent *> * _Nonnull consents;
/// Initialze the create account data
/// \param title The title to show on the Create Account screen
///
/// \param body The body to show on the Create Account screen
///
/// \param consents The consents presented to a user to create an account
///
/// \param registrationSubmitLabel The label to show for the submit button on the Create Account screen
///
/// \param usernameInputConfiguration The input configuration data for the username
///
/// \param passwordInputConfiguration The input configuration data for the password
///
/// \param privacyPolicyUrl The privacy policy URL or <code>nil</code> if the Privacy button shouldn’t be shown on the Create Account screen
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title body:(NSString * _Nonnull)body consents:(NSArray<NGPAuthenticationConsent *> * _Nonnull)consents registrationSubmitLabel:(NSString * _Nonnull)registrationSubmitLabel usernameInputConfiguration:(NGPValidationData * _Nonnull)usernameInputConfiguration passwordInputConfiguration:(NGPValidationData * _Nonnull)passwordInputConfiguration privacyPolicyUrl:(NSString * _Nullable)privacyPolicyUrl OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol NetflixLanguagePreferences;

SWIFT_PROTOCOL_NAMED("CurrentPlayer")
@protocol NetflixCurrentPlayer <NetflixAccountPlayer>
@property (nonatomic, readonly, strong) id <NetflixLanguagePreferences> _Nonnull languagePreferences;
@property (nonatomic, readonly, copy) NSString * _Nonnull netflixAccessToken;
@end


SWIFT_CLASS_NAMED("InGameEvent")
@interface InGameEvent : NSObject
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable json;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name data:(NSString * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (void)clear;
- (NSString * _Nullable)toJSONAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Custom")
@interface Custom : InGameEvent
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name data:(NSString * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)toJSONAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name SWIFT_UNAVAILABLE;
@end


/// This is a logger for debug statements.  All print statements should be logged using this logger instead of <code>NSLog()</code> or <code>print()</code>
SWIFT_CLASS_NAMED("DebugLogger")
@interface NGPDebugLogger : NSObject
/// Logs a debug event.  When the debug flag is enabled, these logs are sent to CL, otherwise they are just printed on device
+ (void)debug:(NSString * _Nonnull)message;
/// These logs are always sent to CL, and also printed on device
+ (void)server:(NSString * _Nonnull)message;
+ (void)device:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("EventEmitterProvider")
@interface NGPEventEmitterProvider : NSObject
- (nonnull instancetype)initWithEventEmitterProtocolConformingObject:(id _Nonnull)eventEmitterProtocolConformingObject OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FirstTimeUserExperienceComplete")
@interface FirstTimeUserExperienceComplete : InGameEvent
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name data:(NSString * _Nonnull)data SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("FirstTimeUserExperienceStart")
@interface FirstTimeUserExperienceStart : InGameEvent
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name data:(NSString * _Nonnull)data SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("FirstTimeUserExperienceStepComplete")
@interface FirstTimeUserExperienceStepComplete : InGameEvent
- (nonnull instancetype)initWithStepNumber:(NSDecimal)stepNumber stepName:(NSString * _Nonnull)stepName stepDesc:(NSString * _Nonnull)stepDesc OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name data:(NSString * _Nonnull)data SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("GameComplete")
@interface GameComplete : InGameEvent
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name data:(NSString * _Nonnull)data SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("GraphQLErrorHandlerAcessEvent")
@interface NGPGraphQLErrorHandlerAccessEvent : NSObject <NGPAccessEvent>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, GraphQLErrorHandlerOutcome, open) {
  GraphQLErrorHandlerOutcomeLogout = 0,
  GraphQLErrorHandlerOutcomeSignup = 1,
  GraphQLErrorHandlerOutcomeNeedsCheckAccess = 2,
};



SWIFT_PROTOCOL_NAMED("InAppPurchaseManagerProtocol")
@protocol NGPInAppPurchaseManagerProtocol
- (NSString * _Nullable)itunesIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)requestProductsWithProductIds:(NSArray<NSString *> * _Nonnull)productIds completionHandler:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSError * _Nullable))completionHandler;
- (void)purchaseWithProductId:(NSString * _Nonnull)productId accountToken:(NSString * _Nonnull)accountToken completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS_NAMED("InAppPurchaseManager") SWIFT_AVAILABILITY(ios,introduced=15)
@interface NGPInAppPurchaseManager : NSObject <NGPInAppPurchaseManagerProtocol>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NGPInAppPurchaseManager * _Nonnull sharedInstance;)
+ (NGPInAppPurchaseManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSString * _Nullable)itunesIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)requestProductsWithProductIds:(NSArray<NSString *> * _Nonnull)productIds completionHandler:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nullable, NSError * _Nullable))completionHandler;
- (void)purchaseWithProductId:(NSString * _Nonnull)productId accountToken:(NSString * _Nonnull)accountToken completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
@end




SWIFT_PROTOCOL_NAMED("Language")
@protocol NetflixLanguage
@property (nonatomic, readonly, copy) NSString * _Nonnull code;
@end


SWIFT_PROTOCOL_NAMED("LanguagePreferences")
@protocol NetflixLanguagePreferences
@property (nonatomic, readonly, strong) id <NetflixLanguage> _Nonnull preferred;
@end

@class NetflixLeaderboardEntriesResult;
@class NetflixLeaderboardEntryResult;
@class NetflixLeaderboardInfoResult;

SWIFT_CLASS_NAMED("Leaderboard")
@interface NGPLeaderboard : NSObject
- (nonnull instancetype)initWithApolloClientProvider:(NGPApolloClientProvider * _Nonnull)apolloClientProvider;
- (void)getTopEntriesWithGuid:(NSString * _Nonnull)guid leaderboardName:(NSString * _Nullable)leaderboardName maxEntries:(NSInteger)maxEntries :(void (^ _Nonnull)(NetflixLeaderboardEntriesResult * _Nonnull))callback;
- (void)getMoreEntriesWithGuid:(NSString * _Nonnull)guid leaderboardName:(NSString * _Nullable)leaderboardName maxEntries:(NSInteger)maxEntries cursor:(NSString * _Nullable)cursor direction:(NetflixFetchDirection)direction callback:(void (^ _Nonnull)(NetflixLeaderboardEntriesResult * _Nonnull))callback;
- (void)getPlayerSurroundingEntriesWithGuid:(NSString * _Nonnull)guid leaderboardName:(NSString * _Nullable)leaderboardName maxEntries:(NSInteger)maxEntries :(void (^ _Nonnull)(NetflixLeaderboardEntriesResult * _Nonnull))callback;
- (void)getCurrentPlayerEntryWithGuid:(NSString * _Nonnull)guid leaderboardName:(NSString * _Nullable)leaderboardName :(void (^ _Nonnull)(NetflixLeaderboardEntryResult * _Nonnull))callback;
- (void)getLeaderboardInfoWithGuid:(NSString * _Nonnull)guid leaderboardName:(NSString * _Nullable)leaderboardName :(void (^ _Nonnull)(NetflixLeaderboardInfoResult * _Nonnull))callback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NetflixLeaderboardEntryPage;

SWIFT_CLASS_NAMED("LeaderboardEntriesResult")
@interface NetflixLeaderboardEntriesResult : NSObject
@property (nonatomic, readonly) NetflixLeaderboardStatus status;
@property (nonatomic, readonly, strong) NetflixLeaderboardEntryPage * _Nullable page;
- (nonnull instancetype)initWithStatus:(NetflixLeaderboardStatus)status message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NetflixPlayerIdentity;

SWIFT_CLASS_NAMED("LeaderboardEntry")
@interface NetflixLeaderboardEntry : NSObject
@property (nonatomic, readonly) NSInteger rank;
@property (nonatomic, readonly) NSInteger position;
@property (nonatomic, readonly, copy) NSString * _Nonnull score;
@property (nonatomic, readonly, strong) NetflixPlayerIdentity * _Nonnull playerIdentity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LeaderboardEntryPage")
@interface NetflixLeaderboardEntryPage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable startCursor;
@property (nonatomic, readonly, copy) NSString * _Nullable endCursor;
@property (nonatomic, readonly) BOOL hasMoreBeforeStart;
@property (nonatomic, readonly) BOOL hasMoreAfterEnd;
@property (nonatomic, readonly, copy) NSArray<NetflixLeaderboardEntry *> * _Nonnull leaderboardEntries;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LeaderboardEntryResult")
@interface NetflixLeaderboardEntryResult : NSObject
@property (nonatomic, readonly) NetflixLeaderboardStatus status;
@property (nonatomic, readonly, strong) NetflixLeaderboardEntry * _Nullable entry;
- (nonnull instancetype)initWithStatus:(NetflixLeaderboardStatus)status message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LeaderboardInfo")
@interface NetflixLeaderboardInfo : NSObject
@property (nonatomic, readonly) NSInteger count;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithCount:(NSInteger)count name:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LeaderboardInfoResult")
@interface NetflixLeaderboardInfoResult : NSObject
@property (nonatomic, readonly, strong) NetflixLeaderboardInfo * _Nullable leaderboardInfo;
@property (nonatomic, readonly) NetflixLeaderboardStatus status;
- (nonnull instancetype)initWithStatus:(NetflixLeaderboardStatus)status message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("Leaderboards")
@protocol NetflixLeaderboards
- (void)topEntriesOnLeaderboardWithNamed:(NSString * _Nonnull)named maxEntries:(NSInteger)maxEntries completionHandler:(void (^ _Nonnull)(NetflixLeaderboardEntriesResult * _Nonnull))completionHandler;
- (void)moreEntriesOnLeaderboardWithNamed:(NSString * _Nonnull)named maxEntries:(NSInteger)maxEntries cursor:(NSString * _Nonnull)cursor direction:(NetflixFetchDirection)direction completionHandler:(void (^ _Nonnull)(NetflixLeaderboardEntriesResult * _Nonnull))completionHandler;
- (void)entriesAroundCurentPlayerOnLeaderboardWithNamed:(NSString * _Nonnull)named maxEntries:(NSInteger)maxEntries completionHandler:(void (^ _Nonnull)(NetflixLeaderboardEntriesResult * _Nonnull))completionHandler;
- (void)currentplayerEntryOnLeaderboardWithNamed:(NSString * _Nonnull)named completionHandler:(void (^ _Nonnull)(NetflixLeaderboardEntryResult * _Nonnull))completionHandler;
- (void)infoForLeaderboardWithNamed:(NSString * _Nonnull)named completionHandler:(void (^ _Nonnull)(NetflixLeaderboardInfoResult * _Nonnull))completionHandler;
@end


SWIFT_CLASS_NAMED("LeaderboardsBridgeFormatter")
@interface NGPLeaderboardsBridgeFormatter : NSObject
- (NSString * _Nonnull)bridgeRepresentationWithEntryResult:(NetflixLeaderboardEntryResult * _Nonnull)entryResult SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)bridgeRepresentationWithInfoResult:(NetflixLeaderboardInfoResult * _Nonnull)infoResult SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)bridgeRepresentationWithEntriesResult:(NetflixLeaderboardEntriesResult * _Nonnull)entriesResult SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("LoggedOutAccessEvent")
@interface NGPLoggedOutAccessEvent : NSObject <NGPAccessEvent>
- (nonnull instancetype)initWithPreviousProfileObject:(NSObject * _Nullable)previousProfileObject OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LoggerProvider")
@interface NGPLoggerProvider : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NGPRecaptchaData;
@class NGPPhoneCode;
@class NGPRecaptchaConfig;

/// The data representing the Log In screen
SWIFT_CLASS_NAMED("LoginAuthenticationData")
@interface NGPLoginAuthenticationData : NSObject <NGPAuthenticationData>
/// The username associated with this login
@property (nonatomic, copy) NSString * _Nullable username;
/// The password associated with this login
@property (nonatomic, copy) NSString * _Nullable password;
/// The country code to pass in case the username is a user’s phone number
@property (nonatomic, copy) NSString * _Nullable countryCode;
/// The data obtained from reCAPTCHA
@property (nonatomic, strong) NGPRecaptchaData * _Nullable recaptchaData;
/// Initialize the login data
/// \param username The username associated with this login
///
/// \param password The password associated with this login
///
/// \param countryCode The country code to pass in case the username is a user’s phone number
///
/// \param usernameInputConfiguration The input configuration data for the username
///
/// \param passwordInputConfiguration The input configuration data for the password
///
/// \param phoneCodes The phone codes to populate the country picker
///
/// \param recaptchaConfig The reCAPTCHA configuration
///
- (nonnull instancetype)initWithUsername:(NSString * _Nullable)username password:(NSString * _Nullable)password countryCode:(NSString * _Nullable)countryCode recaptchaData:(NGPRecaptchaData * _Nullable)recaptchaData usernameInputConfiguration:(NGPValidationData * _Nullable)usernameInputConfiguration passwordInputConfiguration:(NGPValidationData * _Nullable)passwordInputConfiguration phoneCodes:(NSArray<NGPPhoneCode *> * _Nullable)phoneCodes recaptchaConfig:(NGPRecaptchaConfig * _Nullable)recaptchaConfig OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUsername:(NSString * _Nullable)username password:(NSString * _Nullable)password;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Data representing a country’s phone code
SWIFT_CLASS_NAMED("PhoneCode")
@interface NGPPhoneCode : NSObject
/// Initialize a new country <code>PhoneCode</code>
/// \param code The short 2-letter code for the country
///
/// \param phoneCodePrefix The phone code prefix for the country
///
/// \param name The name of the country
///
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code phoneCodePrefix:(NSString * _Nonnull)phoneCodePrefix name:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Data representing the reCAPTCHA configuration
SWIFT_CLASS_NAMED("RecaptchaConfig")
@interface NGPRecaptchaConfig : NSObject
/// Initialize the reCAPTCHA configuration
/// \param siteKey The siteKey to configure the reCAPTCHA client with
///
/// \param timeoutMs The timeout in ms before we bail on the reCAPTCHA call
///
- (nonnull instancetype)initWithSiteKey:(NSString * _Nonnull)siteKey timeoutMs:(NSInteger)timeoutMs OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;

/// Data representing the response from reCAPTCHA
SWIFT_CLASS_NAMED("RecaptchaData")
@interface NGPRecaptchaData : NSObject
/// The token received from reCAPTCHA if successful
@property (nonatomic, readonly, copy) NSString * _Nullable responseToken;
/// The amount of time it took to get a reCAPTCHA response in ms
@property (nonatomic, readonly, strong) NSNumber * _Nullable responseTime;
/// The error if the reCAPTCHA action was unsuccessful
@property (nonatomic, readonly, copy) NSString * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("LoginSuccessfulAccessEvent")
@interface NGPLoginSuccessfulAccessEvent : NSObject <NGPAccessEvent>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC3NGP26NGPAchievementsInitializer")
@interface NGPAchievementsInitializer : NSObject
+ (void)initAchievements SWIFT_METHOD_FAMILY(none);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC3NGP17NSErrorAlertError")
@interface NSErrorAlertError : NSObject
- (nonnull instancetype)initWithError:(NSError * _Nonnull)error data:(id <NGPAuthenticationData> _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, strong) NGPAlertErrorButton * _Nonnull dismissButton;
@property (nonatomic, readonly, strong) NGPAlertErrorButton * _Nullable secondaryButton;
@property (nonatomic, readonly, copy) NSString * _Nonnull errorCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC3NGP24NSErrorAlertStringReason")
@interface NSErrorAlertStringReason : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull incorrectUserLoginId;)
+ (NSString * _Nonnull)incorrectUserLoginId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull incorrectPassword;)
+ (NSString * _Nonnull)incorrectPassword SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull throttling;)
+ (NSString * _Nonnull)throttling SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tokensExceeded;)
+ (NSString * _Nonnull)tokensExceeded SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appUpdateRequired;)
+ (NSString * _Nonnull)appUpdateRequired SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ineligible;)
+ (NSString * _Nonnull)ineligible SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull accountAlreadyExists;)
+ (NSString * _Nonnull)accountAlreadyExists SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull profileAccessPinIncorrect;)
+ (NSString * _Nonnull)profileAccessPinIncorrect SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull network;)
+ (NSString * _Nonnull)network SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull needsProfileSelection;)
+ (NSString * _Nonnull)needsProfileSelection SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull needsLogin;)
+ (NSString * _Nonnull)needsLogin SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull profileNotMatureEnough;)
+ (NSString * _Nonnull)profileNotMatureEnough SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("NeedsProfileSelectionAccessEvent")
@interface NGPNeedsProfileSelectionAccessEvent : NSObject <NGPAccessEvent>
- (nonnull instancetype)initWithPreviousProfileObject:(NSObject * _Nonnull)previousProfileObject error:(NSError * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Repesents whether the achievement is locked or not
typedef SWIFT_ENUM(NSInteger, NetflixAchievementState, open) {
  NetflixAchievementStateLocked = 0,
  NetflixAchievementStateUnlocked = 1,
  NetflixAchievementStatePendingUnlock = 2,
};



SWIFT_CLASS_NAMED("NewGameStart")
@interface NewGameStart : InGameEvent
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name data:(NSString * _Nonnull)data SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("OptionalProfileWrapper")
@interface NGPOptionalProfileWrapper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NGPOrderConfirmPlanFeature;

/// The data representing the Order Confirm screen
SWIFT_CLASS_NAMED("OrderConfirmAuthenticationData")
@interface NGPOrderConfirmAuthenticationData : NSObject <NGPAuthenticationData>
/// A special consent that checks all of the rest of the consents when checked
@property (nonatomic, readonly, strong) NGPAuthenticationConsent * _Nullable checkAllConsent;
/// The consents that should be shown on the Order Confirmation screen
@property (nonatomic, readonly, copy) NSArray<NGPAuthenticationConsent *> * _Nonnull consents;
/// The Apple product ID used to purchase the subscription
@property (nonatomic, readonly, copy) NSString * _Nonnull productId;
/// The logged in user’s account GUID
@property (nonatomic, readonly, copy) NSString * _Nonnull accountGuid;
/// The fetched price for the product
@property (nonatomic, copy) NSString * _Nullable price;
/// The Apple receipt resulting from a successful purchase of the <code>productId</code>
@property (nonatomic, copy) NSString * _Nullable receipt;
/// Initialize the order confirmation data
/// \param title The title to show on the Order Confirmation screen
///
/// \param planIntro The plan intro to show on the Order Confirmation screen. It’s expected to be a
/// String format that takes in a single string argument to substitute the plan price. Supports the bold
/// <code>**</code> markdown indicator.
///
/// \param planFeatures The plan features to show on the Order Confirmation screen
///
/// \param checkAllConsent A special consent that checks all of the rest of the consents when checked
///
/// \param consents The consents that should be shown on the Order Confirmation screen
///
/// \param disclaimerText The disclaimer, if any, that should be shown on the Order Confirmation screen
///
/// \param startCtaLabel The label to be shown on the submit button on the Order Confirmation screen
///
/// \param footer The text to show on the footer of the Order Confirmation screen
///
/// \param termsOfUseUrl The URL for the Terms of Use link on the Order Confirmation screen
///
/// \param privacyPolicyUrl The URL for the Privacy Policy link on the Order Confirmation screen
///
/// \param productId The Apple product ID used to purchase the subscription
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title planIntro:(NSString * _Nonnull)planIntro planFeatures:(NSArray<NGPOrderConfirmPlanFeature *> * _Nonnull)planFeatures checkAllConsent:(NGPAuthenticationConsent * _Nullable)checkAllConsent consents:(NSArray<NGPAuthenticationConsent *> * _Nonnull)consents disclaimerText:(NSString * _Nullable)disclaimerText startCtaLabel:(NSString * _Nonnull)startCtaLabel footer:(NSString * _Nonnull)footer termsOfUseUrl:(NSString * _Nonnull)termsOfUseUrl privacyPolicyUrl:(NSString * _Nonnull)privacyPolicyUrl productId:(NSString * _Nonnull)productId accountGuid:(NSString * _Nonnull)accountGuid OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum NGPOrderConfirmPlanFeatureIcon : NSInteger;

/// A plan feature that can be shown on the Order Confirm screen
SWIFT_CLASS_NAMED("PlanFeature")
@interface NGPOrderConfirmPlanFeature : NSObject
/// Initialize a Plan Feature
/// \param icon The icon to show for this plan feature
///
/// \param label The label to show for this plan feature
///
- (nonnull instancetype)initWithIcon:(enum NGPOrderConfirmPlanFeatureIcon)icon label:(NSString * _Nonnull)label OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The supported icons we can show for each plan feature
typedef SWIFT_ENUM_NAMED(NSInteger, NGPOrderConfirmPlanFeatureIcon, "Icon", open) {
  NGPOrderConfirmPlanFeatureIconGame = 0,
  NGPOrderConfirmPlanFeatureIconPlayIcon = 1,
  NGPOrderConfirmPlanFeatureIconCreditCard = 2,
};


/// Sometimes the platform code needs to know whether the Netflix UI is currently visible
SWIFT_PROTOCOL_NAMED("VisiblityStateManager")
@protocol NGPVisibilityStateManager
@property (nonatomic, readonly) BOOL isNetflixUIVisible;
@end


/// Manages <em>all</em> NGP UI.
/// The main responsibilites of the OverlayDelegate are:
/// <ul>
///   <li>
///     Offer functions to display the Member UI or Acquisition UI; doesn’t make the choice directly.
///   </li>
///   <li>
///     Handles app-state transitions like background and foreground events.
///   </li>
/// </ul>
/// The <code>OverlayDelegate</code> is similar, but not identical to an <code>UIApplicationDelegate</code>.  It’s responsibilities should be self-contained and offer
/// clear API to the rest of the SDK to control the UI and expose application level events where necessary.
SWIFT_CLASS_NAMED("OverlayDelegate")
@interface NGPOverlayDelegate : NSObject <NGPVisibilityStateManager>
/// [Public] Shared public instance to the overlay delegate.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NGPOverlayDelegate * _Nonnull shared;)
+ (NGPOverlayDelegate * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(NGPOverlayDelegate * _Nonnull)value;
/// [Public] A public flag that defines wether or not the developer prefers the netflix UI to be hidden. This is only supported in the member experience, during auth, this flag has no effect.
@property (nonatomic, readonly) BOOL isOverlayPreferredHidden;
/// [Public] A public enumeration for developers to configure where the toast button should be located.
@property (nonatomic, readonly) NGPLocation toastLocation;
- (void)toggleIsOverlayPreferredHiddenWithIsHidden:(BOOL)isHidden loggingCompletion:(void (^ _Nullable)(BOOL))loggingCompletion;
- (void)updateToastLocationWithLocation:(NGPLocation)location loggingCompletion:(void (^ _Nullable)(BOOL))loggingCompletion;
- (void)initializeOverlayWithIsHidden:(BOOL)isHidden toastLocation:(NGPLocation)toastLocation loggingCompletion:(void (^ _Nullable)(BOOL))loggingCompletion;
@property (nonatomic, readonly) BOOL isNetflixUIVisible;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface NGPOverlayDelegate (SWIFT_EXTENSION(NGP))
/// <em>[SDK Internal]</em>
/// API to register for the notifications the overlay delegate needs. Should be called as early as possible in order to hook <code>didBecomeActiveNotification</code>.
/// @caleb TODO: Make this actually “internal” instead of publicly exposed in <code>NGP-Swift.h</code>
- (void)_registerForApplicationLifeCycleEvents;
@end


@class NetflixPlayerIdentityResult;
enum NetflixPlayerIdentitiesRequestStatus : NSInteger;

SWIFT_CLASS_NAMED("PlayerIdentitiesResult")
@interface NetflixPlayerIdentitiesResult : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NetflixPlayerIdentityResult *> * _Nullable playerIdentities;
@property (nonatomic, readonly) enum NetflixPlayerIdentitiesRequestStatus status;
@property (nonatomic, readonly, copy) NSString * _Nullable message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NetflixPlayerIdentitiesRequestStatus, "RequestStatus", open) {
  NetflixPlayerIdentitiesRequestStatusSuccess = 0,
  NetflixPlayerIdentitiesRequestStatusUnknownError = 1000,
  NetflixPlayerIdentitiesRequestStatusLimitExceeded = 1002,
  NetflixPlayerIdentitiesRequestStatusNetworkError = 1003,
};



SWIFT_CLASS_NAMED("PlayerIdentity")
@interface NetflixPlayerIdentity : NSObject <NetflixPlayer>
@property (nonatomic, readonly, copy) NSString * _Nonnull playerID;
@property (nonatomic, readonly, copy) NSString * _Nullable handle;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NetflixPlayerIdentity * _Nullable current;)
+ (NetflixPlayerIdentity * _Nullable)current SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull ID;
+ (void)playerIdentitiesForUCIDs:(NSArray<NSString *> * _Nonnull)UCIDs withCompletionHandler:(void (^ _Nonnull)(NetflixPlayerIdentitiesResult * _Nonnull))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum NetflixPlayerIdentityRequestStatus : NSInteger;

SWIFT_CLASS_NAMED("PlayerIdentityResult")
@interface NetflixPlayerIdentityResult : NSObject
@property (nonatomic, readonly, strong) NetflixPlayerIdentity * _Nullable playerIdentity;
@property (nonatomic, readonly) enum NetflixPlayerIdentityRequestStatus status;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NetflixPlayerIdentityRequestStatus, "RequestStatus", open) {
  NetflixPlayerIdentityRequestStatusSuccess = 0,
  NetflixPlayerIdentityRequestStatusNotFound = 1,
  NetflixPlayerIdentityRequestStatusUnavailable = 2,
};

enum NetflixPlayerResultStatus : NSInteger;

SWIFT_CLASS_NAMED("PlayerResult")
@interface NetflixPlayerResult : NSObject
@property (nonatomic, readonly, strong) id <NetflixPlayer> _Nullable player;
@property (nonatomic, readonly) enum NetflixPlayerResultStatus status;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NetflixPlayerResultStatus, "Status", open) {
  NetflixPlayerResultStatusSuccess = 0,
  NetflixPlayerResultStatusNotFound = 1,
  NetflixPlayerResultStatusUnavailable = 2,
};

@class NetflixPlayersResult;

SWIFT_PROTOCOL_NAMED("Players")
@protocol NetflixPlayers
@property (nonatomic, readonly, strong) id <NetflixCurrentPlayer> _Nullable currentPlayer;
- (void)playersFor:(NSArray<NSString *> * _Nonnull)IDs completionHandler:(void (^ _Nonnull)(NetflixPlayersResult * _Nonnull))completionHandler;
@end

enum NetflixPlayersResultStatus : NSInteger;

SWIFT_CLASS_NAMED("PlayersResult")
@interface NetflixPlayersResult : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NetflixPlayerResult *> * _Nullable players;
@property (nonatomic, readonly) enum NetflixPlayersResultStatus status;
@property (nonatomic, readonly, copy) NSString * _Nullable message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NetflixPlayersResultStatus, "Status", open) {
  NetflixPlayersResultStatusSuccess = 0,
  NetflixPlayersResultStatusUnknownError = 1000,
  NetflixPlayersResultStatusLimitExceeded = 1002,
  NetflixPlayersResultStatusNetworkError = 1003,
};



SWIFT_CLASS_NAMED("ProfileSelectedAccessEvent")
@interface NGPProfileSelectedAccessEvent : NSObject <NGPAccessEvent>
- (nonnull instancetype)initWithCurrentProfileObject:(NSObject * _Nonnull)currentProfileObject previousProfileObject:(NSObject * _Nullable)previousProfileObject OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ProfileWrapper")
@interface NGPProfileWrapper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ProgressCheckpointComplete")
@interface ProgressCheckpointComplete : InGameEvent
- (nonnull instancetype)initWithCheckpointNumber:(NSDecimal)checkpointNumber checkpointName:(NSString * _Nonnull)checkpointName checkpointType:(NSString * _Nonnull)checkpointType checkpointDesc:(NSString * _Nonnull)checkpointDesc OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name data:(NSString * _Nonnull)data SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC3NGP12RemoteConfig")
@interface RemoteConfig : NSObject
@property (nonatomic, readonly) BOOL isAccountLiteExperienceEnabled;
@property (nonatomic, readonly) BOOL shouldVerboseLog;
@property (nonatomic, readonly) BOOL isFilipinoSupportDisabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The source of truth for server sourced config in the app.  Use the <code>RemoteConfigManager.shared</code> singleton
SWIFT_PROTOCOL_NAMED("RemoteConfigManagerProtocol")
@protocol NGPRemoteConfigManagerProtocol
@property (nonatomic, readonly, strong) RemoteConfig * _Nonnull config;
- (void)updateConfigWithConfig:(NSDictionary<NSString *, id> * _Nonnull)config;
@end


SWIFT_CLASS_NAMED("RemoteConfigManager")
@interface NGPRemoteConfigManager : NSObject <NGPRemoteConfigManagerProtocol>
@property (nonatomic, readonly, strong) RemoteConfig * _Nonnull config;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NGPRemoteConfigManager * _Nonnull shared;)
+ (NGPRemoteConfigManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)updateConfigWithConfig:(NSDictionary<NSString *, id> * _Nonnull)config;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The data representing the Returning Account screen
SWIFT_CLASS_NAMED("ReturningAccountAuthenticationData")
@interface NGPReturningAccountAuthenticationData : NSObject <NGPAuthenticationData>
/// Initialize the returning account data
/// \param title The title to show on the Returning Account screen
///
/// \param body The body to show on the Returning Account screen
///
/// \param continueLabel The label to show on teh Continue button on the Returning Account screen
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title body:(NSString * _Nonnull)body continueLabel:(NSString * _Nonnull)continueLabel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("SignupBeganAccessEvent")
@interface NGPSignupBeganAccessEvent : NSObject <NGPAccessEvent>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("SignupSuccessfulAccessEvent")
@interface NGPSignupSuccessfulAccessEvent : NSObject <NGPAccessEvent>
- (nonnull instancetype)initWithCurrentProfileObject:(NSObject * _Nullable)currentProfileObject OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Stat")
@interface NGPStat : NSObject
+ (NSString * _Nonnull)stringForNetflixStatsStatus:(NetflixStatsStatus)status SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtCC3NGP4Stat16SubmitStatResult")
@interface SubmitStatResult : NSObject
@property (nonatomic, readonly) NetflixStatsStatus status;
@property (nonatomic, readonly, strong) NetflixStatItem * _Nullable submittedStat;
@property (nonatomic, readonly, strong) NetflixStatItem * _Nullable aggregatedStat;
- (nonnull instancetype)initWithStatus:(NetflixStatsStatus)status;
- (nonnull instancetype)initWithStatus:(NetflixStatsStatus)status submittedStat:(NetflixStatItem * _Nullable)submittedStat aggregatedStat:(NetflixStatItem * _Nullable)aggregatedStat OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)bridgeRepresentation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Sends submitStats and getAggregatedRequests to the server, in order of submission
/// Requests are queued for offline availability using a <code>GenericPersistedRequestQueue</code>
SWIFT_CLASS_NAMED("StatsRequestQueue")
@interface NGPStatsRequestQueue : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NGPStatsRequestQueue * _Nonnull shared;)
+ (NGPStatsRequestQueue * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)submitStatWithStatItem:(NetflixStatItem * _Nonnull)statItem;
- (void)submitStatNowWithStatItem:(NetflixStatItem * _Nonnull)statItem callback:(void (^ _Nonnull)(SubmitStatResult * _Nonnull))callback;
- (void)getAggregatedStatWithName:(NSString * _Nonnull)name idempotencyKey:(NSString * _Nonnull)idempotencyKey callback:(NetflixAggregatedStatCallback _Nonnull)callback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Configuration data that controls text input used in the sign up flow
SWIFT_CLASS_NAMED("TextInputConfiguration")
@interface NGPValidationData : NSObject
/// Initialize the configuration
/// \param label The placeholder text that should be shown in the text input
///
/// \param isMasked Whether or not the text should be hidden from the user (e.g. password input). Note, this property is currently not used, instead using the <code>LoginTextFieldType</code> property
///
/// \param minLength An <code>NSNumber</code> containing an <code>int</code> that denotes the minimum acceptable length for this text input or <code>nil</code> if there is no minimum
///
/// \param maxLength An <code>NSNumber</code> containing an <code>int</code> that denotes the maximum acceptable length for this text input or <code>nil</code> if there is no maximum
///
/// \param validationPattern The RegEx pattern to validate the text if one exists
///
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label isMasked:(BOOL)isMasked minLength:(NSNumber * _Nullable)minLength maxLength:(NSNumber * _Nullable)maxLength validationPattern:(NSString * _Nullable)validationPattern OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NSThread (SWIFT_EXTENSION(NGP))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isTesting;)
+ (BOOL)isTesting SWIFT_WARN_UNUSED_RESULT;
@end









SWIFT_CLASS("_TtC3NGP14UnifiedLogging")
@interface UnifiedLogging : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isEnabled;)
+ (BOOL)isEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)configureLoggerWithEnableLoggingOverride:(BOOL)enableLoggingOverride;
+ (void)instrumentAPIWithFileID:(NSString * _Nonnull)fileID function:(NSString * _Nonnull)function;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A top level object representing the result of an operation involving a single achievement.
SWIFT_CLASS_NAMED("UnlockAchievementResult")
@interface NetflixUnlockAchievementResult : NSObject
@property (nonatomic, readonly) enum NetflixAchievementStatus status;
@property (nonatomic, readonly, strong) NetflixAchievement * _Nullable achievement;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class UIView;
@class NSCoder;
@protocol UIContentContainer;
@class NSBundle;

/// An Authentication flow specific, utility oriented, <code>UIViewController</code> subclass that owns handles displaying the “modal”-like design.
/// This class handles resizing an arbitrary “content” view controller to it’s ideal size, embedding it in a scroll view where needed and adapting layout for keyboard events.
/// These smarts are aimed to make it easy to develop any kind of Auth Flow / non-member related UI.
SWIFT_CLASS("_TtC3NGP36_AuthenticationContentViewController")
@interface _AuthenticationContentViewController : UIViewController
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarStyle;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarHidden;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForHomeIndicatorAutoHidden;
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
/// Child ViewController that contains the displayable content owned by our view controller.
@property (nonatomic, readonly, strong) UIViewController * _Nonnull contentViewController;
@property (nonatomic, readonly, strong) UIView * _Nullable headerView;
@property (nonatomic) UIEdgeInsets additionalSafeAreaInsets;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithContentViewController:(UIViewController * _Nonnull)contentViewController headerView:(UIView * _Nullable)headerView OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)preferredContentSizeDidChangeForChildContentContainer:(id <UIContentContainer> _Nonnull)container;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
